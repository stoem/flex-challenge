<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:controls="controls.*"
               width="640" height="480" minWidth="640" minHeight="480"
               applicationComplete="applicationCompleteHandler(event)">
    <fx:Script>
		<![CDATA[
        import enums.EquationSymbols;
        import enums.StatusMessages;

        import mx.events.FlexEvent;

        import spark.events.TextOperationEvent;

        private static const REQUEST_BASE_URL:String = "http://latex.codecogs.com/gif.latex?%5CLARGE%20%5Cbg_white%20";

        private var triggersCollection:Vector.<CustomButton>;

        protected function applicationCompleteHandler(event:FlexEvent):void
        {
            hideStatus();
            controlsInit();
        }

        private function controlsInit():void
        {
            equationImage.addEventListener(Event.COMPLETE, imageLoadCompleteHandler);

            registerTriggers();

            verticalLayoutContainer.visible = true;
        }

        private function imageLoadCompleteHandler(event:Event):void
        {
            hideStatus();
        }

        private function showStatus(statusMessage:String):void
        {
            if (!statusMessage || statusMessage == "")
            {
                return;
            }

            statusMessageLabel.text = statusMessage;
            statusPopup.visible = true;
        }

        private function hideStatus():void
        {
            statusMessageLabel.text = "";
            statusPopup.visible = false;
        }

        private function registerTriggers():void
        {
            const triggersCount:int = triggersContainer.numElements;

            for (var j:int = 0; j < triggersCount; j++)
            {
                registerTriggerHandlers(triggersContainer.getElementAt(j) as CustomButton);
            }
        }

        private function registerTriggerHandlers(dispatcher:EventDispatcher):void
        {
            dispatcher.addEventListener(MouseEvent.CLICK, triggerHandler);
        }

        private function unregisterTriggerHandlers(dispatcher:EventDispatcher):void
        {
//            dispatcher.removeEventListener(MouseEvent.CLICK, triggerHandler);
        }

        private function triggerHandler(event:MouseEvent):void
        {
            const trigger:CustomButton = (event.target) as CustomButton;
            const curPos:int = equationInputField.selectionActivePosition; //  selectionAnchorPosition
            const focus:int = trigger.value.indexOf(EquationSymbols.FOCUS_MARKER) != -1 ? trigger.value.indexOf(EquationSymbols.FOCUS_MARKER) : 0;
            const value:String = stripMarker(trigger.value);

            if (curPos != -1)
            {
                equationInputField.text = equationInputField.text.substr(0, curPos) + value + equationInputField.text.substr(curPos);
                equationInputField.selectRange(equationInputField.selectionActivePosition + focus, equationInputField.selectionActivePosition + focus);
            }
            else
            {
                equationInputField.text += value;
                equationInputField.selectRange(focus, focus);
            }
        }

        private static function stripMarker(inputString:String):String
        {
            return inputString.replace(EquationSymbols.FOCUS_MARKER, "");
        }

        private function textInputChangeHandler(event:TextOperationEvent):void
        {
            showStatus(StatusMessages.REQUEST_IMAGE);
            equationImage.source = REQUEST_BASE_URL + escape(event.target.text);
        }
        ]]>
	</fx:Script>
    <fx:Declarations>

    </fx:Declarations>

    <s:VGroup id="verticalLayoutContainer" left="10" right="10" top="10" bottom="10" gap="10" horizontalAlign="center" visible="false">
        <s:HGroup id="triggersContainer" width="100%" height="100">
            <controls:CustomButton value="{EquationSymbols.SUB}" icon="@Embed('assets/icons/subscript.png')"/>
            <controls:CustomButton value="{EquationSymbols.SUP}" icon="@Embed('assets/icons/superscript.png')"/>
            <controls:CustomButton value="{EquationSymbols.SUM}" icon="@Embed('assets/icons/sum.png')"/>
            <controls:CustomButton value="{EquationSymbols.FRACTION}" icon="@Embed('assets/icons/fraction.png')"/>
            <controls:CustomButton value="{EquationSymbols.SIN}" icon="@Embed('assets/icons/sin.png')"/>
            <controls:CustomButton value="{EquationSymbols.COS}" icon="@Embed('assets/icons/cos.png')"/>
        </s:HGroup>
        <s:TextArea id="equationInputField" width="100%" height="200" change="textInputChangeHandler(event);"/>
        <s:Image id="equationImage"/>
    </s:VGroup>
    <s:BorderContainer id="statusPopup" width="400" height="150" backgroundColor="#88889A"
                       borderVisible="false" contentBackgroundColor="#FFFFFF" cornerRadius="10"
                       horizontalCenter="0" bottom="10">
        <s:Label id="statusMessageLabel" width="300" color="#ffffff" horizontalCenter="0"
                 text="Label" textAlign="center" verticalAlign="middle" verticalCenter="0"/>

    </s:BorderContainer>
</s:Application>